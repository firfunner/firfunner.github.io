<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Lippi-浮生志</title>
 <link href="http://http://coolshell.info/atom.xml" rel="self"/>
 <link href="http://http://coolshell.info"/>
 <updated>2017-04-30T21:26:11+08:00</updated>
 <author>
   <name>Lippi.OuYang</name>
   <email>ouyanglip@gmail.com</email>
 </author>

 
 <entry>
   <title>hi</title>
   <link href="http://http://coolshell.info/blog/2016/02/hi.html"/>
   <updated>2016-02-22T00:00:00+08:00</updated>
   <id>/blog/2016/02/hi</id>
   <content type="html">&lt;p&gt;hi!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git操作手册|命令速查表</title>
   <link href="http://http://coolshell.info/blog/2016/02/git-guide.html"/>
   <updated>2016-02-20T00:00:00+08:00</updated>
   <id>/blog/2016/02/git-guide</id>
   <content type="html">&lt;p&gt;这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。
本文分为以下几个部分：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Git与SVN差异&lt;/li&gt;
  &lt;li&gt;Git常用命令&lt;/li&gt;
  &lt;li&gt;Git进阶指南&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Git与SVN差异&lt;/p&gt;

&lt;p&gt;Git的第一个版本是Linux之父Linus Torvalds亲手操刀设计和实现的,Git 基于 DAG 结构 (Directed Acyclic Graph)，其运行起来相当的快,它已经是现在的主流。&lt;/p&gt;

&lt;p&gt;Git 和 SVN 思想最大的差别有四个：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;去中心化&lt;/li&gt;
  &lt;li&gt;直接记录快照，而非差异&lt;/li&gt;
  &lt;li&gt;不一样的分支概念&lt;/li&gt;
  &lt;li&gt;三个文件状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;去中心化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git是一个DVCS（分布式版本管理系统），在技术层面上并不存在一个像中心仓库这样的东西 ， 所有的数据都在本地，不存在谁是中心&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/git.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中每个开发者拉取(pull)并推送(push)到origin。但除了这种集中式的推送拉取关系，每个开发者也可能会从其他的开发者处拉取代码的变更，从技术上讲，这意味着Alice定义了一个名为bob的Git的remote，它指向了Bob的软件仓库。反之亦然。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;直接记录快照，而非差异&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git每一个版本都是直接记录快照，而非文件的差异。 下面两个对比图在网上是广为流传大家应该熟悉：&lt;/p&gt;

&lt;p&gt;SVN：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/svn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/gitgit.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Git使用SHA-1算法计算数据的校验和，通过文件的内容或目录计算出SHA-1哈希值，作为指纹字符串，每个Version 都是一个快照。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不一样的分支概念&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git的分支本质是一个指向提交快照的指针，是从某个提交快照往回看的历史。当创建/切换分支的时候，只是变换了指针指向而已.而SVN创建一个分支， 是的的确确的复制了一份文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三个文件状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Git中文件有三种状态：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;已提交（committed）：该文件被安全地保存在了本地数据库&lt;/li&gt;
  &lt;li&gt;已修改（modified）：修改了某个文件，但还没有保存&lt;/li&gt;
  &lt;li&gt;已暂存（staged）：把已修改的文件放下下次保存的清单中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Git常用命令&lt;/p&gt;

&lt;p&gt;###创建&lt;/p&gt;

&lt;p&gt;复制一个已创建的仓库:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone ssh://user@domain.com/repo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建一个新的本地仓库:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###本地修改&lt;/p&gt;

&lt;p&gt;显示工作路径下已修改的文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示与上次提交版本文件的不同：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把当前所有修改添加到下次提交中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把对某个文件的修改添加到下次提交中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交本地的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交之前已标记的变化：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;附加消息提交：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m 'message here'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;提交，并将提交时间设置为之前的某个日期:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --date=&quot;`date --date='n day ago'`&quot; -am &quot;Commit Message&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###修改上次提交&lt;/p&gt;

&lt;p&gt;请勿修改已发布的提交记录!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;把当前分支中未提交的修改移动到其他分支&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash
git checkout branch2
git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###搜索&lt;/p&gt;

&lt;p&gt;从当前目录的所有文件中查找文本内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git grep &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在某一版本中搜索文本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git grep &quot;Hello&quot; v2.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###提交历史&lt;/p&gt;

&lt;p&gt;从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示所有提交（仅显示提交的hash和message）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示某个用户的所有提交：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --author=&quot;username&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示某个文件的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log -p &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;谁，在什么时间，修改了文件的什么内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###分支与标签&lt;/p&gt;

&lt;p&gt;列出所有的分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;切换分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建并切换到新分支:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;基于当前分支创建新分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch &amp;lt;new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;基于远程分支创建新的可追溯的分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch --track &amp;lt;new-branch&amp;gt; &amp;lt;remote-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除本地分支:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch -d &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;给当前版本打标签：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git tag &amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###更新与发布&lt;/p&gt;

&lt;p&gt;列出当前配置的远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;显示远程端的信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote show &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;添加新的远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载远程端版本，但不合并到HEAD中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git fetch &amp;lt;remote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载远程端版本，并自动与HEAD版本合并：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote pull &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将远程端版本合并到本地版本中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git pull origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将本地版本发布到远程端：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push remote &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除远程端分支：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; :&amp;lt;branch&amp;gt; (since Git v1.5.0)
或
git push &amp;lt;remote&amp;gt; --delete &amp;lt;branch&amp;gt; (since Git v1.7.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;发布标签:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###合并与重置&lt;/p&gt;

&lt;p&gt;将分支合并到当前HEAD中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将当前HEAD版本重置到分支中:
请勿重置已发布的提交!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;退出重置:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase --abort
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解决冲突后继续重置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用配置好的merge tool 解决冲突：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git mergetool
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在编辑器中手动解决冲突后，标记文件为已解决冲突&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add &amp;lt;resolved-file&amp;gt;
$ git rm &amp;lt;resolved-file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###撤销&lt;/p&gt;

&lt;p&gt;放弃工作目录下的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;移除缓存区的所有文件（i.e. 撤销上次git add）:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;放弃某个文件的所有本地修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout HEAD &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重置一个提交（通过创建一个截然不同的新提交）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git revert &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将HEAD重置到上一次提交的版本，并保留未提交的本地修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --keep &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;##Git进阶指南&lt;/p&gt;

&lt;p&gt;###问：如何修改 origin 仓库信息？&lt;/p&gt;

&lt;p&gt;####1、添加 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin &amp;lt;git仓库地址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####2、查看 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 以下三种方式均可
git config get --remote.origin.url
git remote -v
git remote show origin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####3、删除 origin 仓库信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git remote rm origin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何配置 git ssh keys ？&lt;/p&gt;

&lt;p&gt;在本地生成 ssh 私钥 / 公钥 文件
将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台
测试 git ssh 连接是否成功
接下来以添加 github ssh keys 为例，请注意替换 github 文件名。&lt;/p&gt;

&lt;p&gt;注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 运行以下命令，一直回车，文件名可随意指定
ssh-keygen -t rsa -b 4096 -C &quot;kaiye@macbook&quot; -f ~/.ssh/github

# 如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain
ssh-add -K ~/.ssh/github

# 将 pub 公钥的内容粘贴到线上网站的后台
cat ~/.ssh/github.pub

# 测试 git ssh 是否连接成功
ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何撤销修改？&lt;/p&gt;

&lt;p&gt;修改包含四种情况，需单独区分。&lt;/p&gt;

&lt;p&gt;####1、新建的文件和目录，且从未提交至版本库&lt;/p&gt;

&lt;p&gt;此类文件的状态为 Untracked files ，撤销方法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clean -fd .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，. 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。&lt;/p&gt;

&lt;p&gt;####2、提交过版本库，但未提交至暂存区的文件（未执行 git add）&lt;/p&gt;

&lt;p&gt;此类文件的状态为&lt;code class=&quot;highlighter-rouge&quot;&gt; Changes not staged for commit&lt;/code&gt;，撤销方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git checkout .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####3、已提交至暂存区的文件&lt;/p&gt;

&lt;p&gt;此类文件的状态为 Changes to be committed，撤销方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 –hard 参数，将会把修改过的文件也还原成版本库中的版本。&lt;/p&gt;

&lt;p&gt;####4、已提交至版本库（执行了 git commit）&lt;/p&gt;

&lt;p&gt;每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
git reset &amp;lt;版本号&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果需要「回滚至上一次提交」，可直接使用以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset head~1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 -f 强制提交参数，且当前用户需要具备「强制提交的权限」。&lt;/p&gt;

&lt;p&gt;####5、如果回滚了之后又不想回滚了怎么办？&lt;/p&gt;

&lt;p&gt;如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。&lt;/p&gt;

&lt;p&gt;如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 git reflog 命令（所有使用过的版本号）找到回滚之前的版本号，然后 git reset &lt;版本号&gt; 。&lt;/版本号&gt;&lt;/p&gt;

&lt;p&gt;###问：遇到冲突了怎么解决？&lt;/p&gt;

&lt;p&gt;两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 Unmerged 状态，需要解决冲突。&lt;/p&gt;

&lt;p&gt;####1、最快的办法&lt;/p&gt;

&lt;p&gt;大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 使用当前分支 HEAD 版本，通常是冲突源文件的 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 标记部分，======= 的上方
git checkout --ours &amp;lt;文件名&amp;gt;

 # 使用合并分支版本，通常是源冲突文件的 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 标记部分
 git checkout --theirs &amp;lt;文件名&amp;gt;

# 标记为解决状态加入暂存区
git add &amp;lt;文件名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####2、最通用的办法&lt;/p&gt;

&lt;p&gt;用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。&lt;/p&gt;

&lt;p&gt;在 Mac 系统下，运行 git mergetool &lt;文件名&gt; 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 Meld 或 kdiff3，体验更佳。&lt;/文件名&gt;&lt;/p&gt;

&lt;p&gt;####3、最好的习惯&lt;/p&gt;

&lt;p&gt;有三个好的习惯，可以减少代码的冲突：
 在开始修改代码前先 git pull 一下；
  将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件；
  通过Gitflow 工作流也可以提升 git流程效率，减少发生冲突的可能性。&lt;/p&gt;

&lt;p&gt;####4、最复杂的情况&lt;/p&gt;

&lt;p&gt;如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，git pull –rebase 可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。&lt;/p&gt;

&lt;p&gt;它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。&lt;/p&gt;

&lt;p&gt;rebase 大概的操作步骤如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 将当前分支的版本追加到从远程 pull 回来的节点之后
git pull --rebase

# 若发生冲突，则按以上其他方法进行解决，解决后继续
git rebase --continue

# 直到所有冲突得以解决，待项目最后上线前再执行
git push origin

# 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可
git rebase --skip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何在不提交修改的前提下，执行 pull / merge 等操作？&lt;/p&gt;

&lt;p&gt;有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。&lt;/p&gt;

&lt;p&gt;这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 git stash 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。&lt;/p&gt;

&lt;p&gt;以下是 git stash 常用命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 查看 stash 队列中已暂存了多少 WIP
git stash list

# 恢复上一次的 WIP 状态，并从队列中移除
git stash pop

# 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失
git stash

# 恢复指定编号的 WIP，同时从队列中移除
git stash pop stash@{num}

# 恢复指定编号的 WIP，但不从队列中移除
git stash apply stash@{num}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###问：如何在 git log 中查看修改的文件列表？&lt;/p&gt;

&lt;p&gt;默认的 git log 会显示较全的信息，且不包含文件列表。使用 –name-status 可以看到修改的文件列表，使用 –oneline 可以将参数简化成一行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --name-status --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.ls 'log --name-status --oneline --graph'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行以上配置后，可通过 git ls 命令来实现「自定义 git log」效果，通过该方法也可以创建 git st 、 git ci 等一系列命令，以便沿用 svn 命令行习惯。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global alias.st 'status --porcelain'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多 git log 参数，可通过 git help log 查看手册。&lt;/p&gt;

&lt;p&gt;如果是看上一次提交的版本日志，直接运行 git show 即可。&lt;/p&gt;

&lt;p&gt;此外，如果你的 Mac 安装了zsh（参考《全新Mac安装指南（编程篇），那么可以直接使用 gst、glog 等一系列快捷命令，详情见此列表：Plugin:git 。&lt;/p&gt;

&lt;p&gt;###问：git submodule update 时出错怎么解决？&lt;/p&gt;

&lt;p&gt;例如，在执行 git submodule update 时有以下错误信息：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;fatal: reference is not a tree: f869da471c5d8a185cd110bbe4842d6757b002f5
Unable to checkout ‘f869da471c5d8a185cd110bbe4842d6757b002f5’ in submodule path ‘source/i18n-php-server’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。&lt;/p&gt;

&lt;p&gt;解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。&lt;/p&gt;

&lt;p&gt;###其他问题&lt;/p&gt;

&lt;p&gt;设置本地分支与远程分支保持同步，在第一次 git push 的时候带上 -u 参数即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin master -u 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示）&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config core.quotepath off
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;常用的打 tag 操作，更多请查看《Git 基础 - 打标签》&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地 tag
git tag   

# 本地新增一个 tag，推送至 origin 服务器
git tag -a v1.0.0 -m 'tag description'
git push origin v1.0.0

# 删除本地与 origin tag
git tag -d v1.0.0
git push origin --delete v1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用 git GUI 客户端（如，SoureTree、Github Desktop）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用 git pull 即可；从另外一个本地分支 merge 到当前分支，使用 git merge &lt;分支名&gt;，以下是常用命令：&lt;/分支名&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 新建分支 branch1，并切换过去
git checkout -b branch1

# 查看所有本地与远程分支
git branch -a

# 修改完成后，切换回 master 分支，将 branch1 分支合并进来
git checkout master
git merge branch1

# 删除已完成合并的分支 branch1
git branch -d branch1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###参考资料&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pro Git 简体中文版&lt;/li&gt;
  &lt;li&gt;Git权威指南&lt;/li&gt;
  &lt;li&gt;命令行man手册&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>解决百度爬虫无法抓取github pages</title>
   <link href="http://http://coolshell.info/blog/2016/02/baidu-spider-forbidden.html"/>
   <updated>2016-02-18T00:00:00+08:00</updated>
   <id>/blog/2016/02/baidu-spider-forbidden</id>
   <content type="html">&lt;p&gt;由于Github Pages禁止了百度爬虫，导致自己的博客无法被百度索引到，使用七牛云和又拍云做镜像存储能解决问题，但是要求域名要备案，由于我的域名从Godaddy上购买的，国内备案手续太复杂，故放弃了CDN的办法，琢磨了一段时间找到了Gitcafe的解决办法。&lt;/p&gt;

&lt;p&gt;##解决方案&lt;/p&gt;

&lt;p&gt;既然不想放弃Github，唯一的办法就是不让百度爬虫直接抓取GIthub的内容，而是抓取自己网站的一个镜像，将网站的内容镜像到&lt;a href=&quot;www.gitcafe.com&quot;&gt;gitcafe&lt;/a&gt;,步骤如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注册 gitcafe 帐号&lt;/li&gt;
  &lt;li&gt;创建一个跟用户名一样的项目,比如我的&lt;a href=&quot;https://gitcafe.com/ezlippi/ezlippi&quot;&gt;https://gitcafe.com/ezlippi/ezlipp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;把 github 的项目推到 gitcafe 上面去，步骤如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add gitcafe https://gitcafe.com/ezlippi/ezlippi.git
git checkout -b gitcafe-pages
切换到一个新分支 &lt;span class=&quot;s1&quot;&gt;'gitcafe-pages'&lt;/span&gt;
git push gitcafe master:gitcafe-pages
Username &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://gitcafe.com'&lt;/span&gt;:ezlippi 
Password &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://ezlippi@gitcafe.com'&lt;/span&gt;
Counting objects: 17, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Delta compression using up to 4 threads.
Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10/10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10/10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1.06 KiB | 0 bytes/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;.
Total 10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
To https://gitcafe.com/ezlippi/ezlippi.git
   f0d0296..51611d7  master -&amp;gt; gitcafe-pages&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;gitcafe绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;点击项目的右上角的 项目配置&lt;/li&gt;
  &lt;li&gt;在项目的 基础设置 中配置项目主页&lt;/li&gt;
  &lt;li&gt;在 page服务 中添加自己的域名，比如我这里是&lt;a href=&quot;coolshell.info&quot;&gt;coolshell.info&lt;/a&gt;和&lt;a href=&quot;www.coolshell.info&quot;&gt;www.coolshell.info&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;DNS的配置中增加一项 CNAME.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我使用 dnspod 这个提供商来管理DNS.CNAME一般可以按解析路线或者网络类型来单独配置,网络类型选择国内或者联通，设置之后等待一段时间百度的抓取就 恢复正常了，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/dnspod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Ubuntu下Apache服务器的配置</title>
   <link href="http://http://coolshell.info/blog/2016/01/apache-configuration-in-ubuntu.html"/>
   <updated>2016-01-20T00:00:00+08:00</updated>
   <id>/blog/2016/01/apache-configuration-in-ubuntu</id>
   <content type="html">&lt;p&gt;##安装Apache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo apt-get update
sudo apt-get install apache2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;打开浏览器输入你的IP地址或者localhost,就会进入到Apache服务器的默认Index页面。结果如下所示：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It works!
This is the default web page for this server.
The web server software is running but no content has been added, yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;##配置文件&lt;/p&gt;

&lt;p&gt;在Ubuntu系统下Apache的主要配置文件在/etc/apache2文件夹下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;cd /etc/apache2
ls -F&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;apache2.conf  envvars     magic            mods-enabled/  sites-available/
conf.d/       httpd.conf  mods-available/  ports.conf     sites-enabled/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个目录下有许多纯文本文件和子目录，基本作用如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apache2.conf:这是服务器的主要配置文件，几乎所有的配置都通过这个文件来完成，但是为了简洁推荐使用单独的指定的文件来配置不同的模块。&lt;/li&gt;
  &lt;li&gt;ports.conf:这个文件用来指定虚拟主机监听的端口号，如果你配置了SSL的时候要检查这个文件是否正确。&lt;/li&gt;
  &lt;li&gt;conf.d/:这个目录用来控制Apache的一些特殊配置，比如SSL配置。&lt;/li&gt;
  &lt;li&gt;sites-available/:这个目录包括所有不同web站点的虚拟主机文件，不同的请求对应不同的内容，这些都是已有的，并不是正在使用的。&lt;/li&gt;
  &lt;li&gt;sites-enabled/:这个目录包含正在使用的虚拟主机的定义，通常只包含到sites-available目录下文件的符号链接。&lt;/li&gt;
  &lt;li&gt;mods-[enabled,available]/:和上面的类似，只不过这里面包含的是可用的模块。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从Apache的配置目录结构可以知道，它并不是通过单一的文件来配置，贰拾通过模块化来把整个系统拆分成不同的功能，从而能够动态地增加和修改功能。&lt;/p&gt;

&lt;p&gt;##深入Apache2.conf文件内容&lt;/p&gt;

&lt;p&gt;文件主要分成三部分，全局配置、默认服务器配置和虚拟主机配置，在Ubuntu系统下，这个文件主要负责全局配置，默认服务器和虚拟主机可以通过Include语句来处理。&lt;/p&gt;

&lt;p&gt;Include语句允许Apache读取其他配置文件的内容到当前位置，结果就是Apache启动的时候动态生成一个配置文件，如果拉到文件底部会看到很多Include语句，比如ports.conf等。&lt;/p&gt;

&lt;p&gt;###全局配置&lt;/p&gt;

&lt;p&gt;####Timeout&lt;/p&gt;

&lt;p&gt;这个参数默认设置为300，意思是服务器有300s来处理每个请求。&lt;/p&gt;

&lt;p&gt;####KeepAlive&lt;/p&gt;

&lt;p&gt;如果设置为On，将允许同个客户端每个连接一直保持来处理多个请求(HTTP长连接)&lt;/p&gt;

&lt;p&gt;####MaxKeepAliveRequests&lt;/p&gt;

&lt;p&gt;这个参数用来设置每个连接最多能处理多少个单独的请求&lt;/p&gt;

&lt;p&gt;####KeepAliveTimeout&lt;/p&gt;

&lt;p&gt;这个参数设置下一个请求来之前来等待多久，超过这个时间自动关闭这个connection。&lt;/p&gt;

&lt;p&gt;##MPM配置&lt;/p&gt;

&lt;p&gt;Ubuntu 14.04下MPM(Multi-Processing Module)配置默认采用了event module,如果你系统采用的是prefork module,可以通过如下方法来切换：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2dismod mpm_prefork
sudo a2enmod mpm_event
sudo service apache2 restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##配置虚拟主机&lt;/p&gt;

&lt;p&gt;1.首先禁用默认的Apache虚拟主机：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2dissite 000-default.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.在/etc/apache2/sites-available目录下创建一个example.com.conf文件，把example.com替换成你的域名：&lt;/p&gt;

&lt;p&gt;文件：/etc/apache2/sites-available/example.com.conf&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; *:80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nc&quot;&gt;ServerAdmin&lt;/span&gt; webmaster@example.com
  &lt;span class=&quot;nc&quot;&gt;ServerName&lt;/span&gt; example.com
  &lt;span class=&quot;nc&quot;&gt;ServerAlias&lt;/span&gt; www.example.com
  &lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /var/www/example.com/public_html/
  &lt;span class=&quot;nc&quot;&gt;ErrorLog&lt;/span&gt; /var/www/example.com/logs/error.log 
  CustomLog /var/www/example.com/logs/access.log combined
 &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.给你的网站内容和日志文件创建目录，把example.com替换成你的域名：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo mkdir -p /var/www/example.com/public_html
sudo mkdir /var/www/example.com/logs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;4.启用这个站点：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2ensite example.com.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;5.重启Apache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo service apache2 restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;安装对脚本语言的支持&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Perl support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-perl2 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Python support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-python &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;PHP support:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install libapache2-mod-php5 php5 php-pear php5-xcache&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Apache中启用和禁用网站和模块&lt;/p&gt;

&lt;p&gt;1.启用和禁用网站：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2ensite 虚拟主机文件名(example.com.conf)
sudo a2dissite 虚拟主机文件名(example.com.conf)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.启用和禁用模块&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;sudo a2enmod 模块配置文件名
sudo a2dismod  模块配置文件名&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##启用用户文件夹实现文件服务器的功能&lt;/p&gt;

&lt;p&gt;1.使用如下命令启用userdir模块:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo a2enmod userdir&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;2.编辑userdir.conf配置userdir模块:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/apache2/mods-enabled/userdir.conf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;内容如下，把public_html改为你的个人文件夹名称，如果不存在则创建：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_userdir.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; public_html
        &lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; disabled root
 
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /home/*/public_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;All&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;SymLinksIfOwnerMatch&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;
		        &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
		        &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
 
		        &lt;span class=&quot;c&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;
		        &lt;span class=&quot;c&quot;&gt;#Require all granted&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;# Apache &amp;lt;= 2.2:&lt;/span&gt;
		        &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; deny,allow
		        &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
 
			&lt;span class=&quot;c&quot;&gt;# Apache &amp;gt;= 2.4:&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;#Require all denied&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3.创建个人文件夹并重启APache&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo service apache2 restart
mkdir /home/&lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;/public_html &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来在浏览器中输入http://localhost/~username/就可以访问你的个人文件夹了，把username替换为你的用户名。&lt;/p&gt;

&lt;p&gt;###给你的文件添加访问权限&lt;/p&gt;

&lt;p&gt;把上面的AllowOverride All改为AllowOverride AuthConfig,然后给你的服务器添加认证用户，认证用户保存在/var/www/passwd/中，需要使用htpasswd命令来添加用户，如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;htpasswd -c /var/www/passwd/public_html lippi 
New password: mypassword
Re-type new password: mypassword
Adding password for &lt;span class=&quot;ss&quot;&gt;user&lt;/span&gt; lippi &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后的userdir.conf是这样的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_userdir.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;nc&quot;&gt;UserDir&lt;/span&gt; public_html 
	UserDir disabled root

	&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /home/*/public_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FileInfo&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;AuthConfig&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Limit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;SymLinksIfOwnerMatch&lt;/span&gt; IncludesNoExec
		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#		Require all granted&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;AuthType&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Basic&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;AuthName&lt;/span&gt; &quot;lippi&quot;
			&lt;span class=&quot;nc&quot;&gt;AuthUserFile&lt;/span&gt; /var/www/passwd/public_html
			&lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;valid-user&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; GET POST OPTIONS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;			&lt;span class=&quot;nc&quot;&gt;Require&lt;/span&gt; all denied
		&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;LimitExcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>终端复用软件之tmux简介</title>
   <link href="http://http://coolshell.info/blog/2016/01/tmux-guide.html"/>
   <updated>2016-01-19T00:00:00+08:00</updated>
   <id>/blog/2016/01/tmux-guide</id>
   <content type="html">&lt;p&gt;Tmux是一个优秀的终端复用软件，支持多标签，也支持窗口内部面板的分割，更重要的是，Tmux提供了窗体随时保存和恢复的功能。想象一下假如你在公司的服务器上开了许多窗口调试程序，回到家时通过SSH连接公司电脑又要打开一堆繁琐的窗口，而且还忘记了当时调试到哪一步了，那Tmux可以帮你解决这个难题，当SSH连接断开重新连接后能够恢复到原来的工作环境。&lt;/p&gt;

&lt;p&gt;##安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install tmux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装完成后输入tmux进入软件，界面类似一个下方带有状态栏的终端。&lt;/p&gt;

&lt;p&gt;##基本概念&lt;/p&gt;

&lt;p&gt;Tmux基于典型的c/s模型，主要分为会话、窗口和面板三个元素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Session：输入tmux后就创建了一个会话，一个会话是一组窗体的集合。&lt;/li&gt;
  &lt;li&gt;Window：会话中一个可见的窗口。&lt;/li&gt;
  &lt;li&gt;Pane:一个窗口可以分成多个面板。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/tmux.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中左下角的3显示为当前会话，随后1 vim,2 bash,3 ssh 分别是3个窗口，蓝色bash表示当前窗口，图中用蓝色数字标记的1,2,3分别是bash窗口的三个面板。你还可以在tmux配置文件中给状态栏添加时间、天气等信息。&lt;/p&gt;

&lt;p&gt;##Tmux基本操作&lt;/p&gt;

&lt;p&gt;Tmux的所有操作必须使用一个前缀进入命令模式，默认前缀为Ctrl+b，很多人会改为Ctrl+a,你可以修改tmux.conf配置文件来修改默认前缀：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#前缀设置为&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; prefix C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;
#解除&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
ubind C&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;修改之后重启Tmux生效，或者先按Ctrl+b，然后输入：，进入命令行模式， 在命令行模式下输入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;source&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;tmux&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你也可以在配置文件中加入下面这句话，以后改了配置文件只需要按前缀+r了。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#将&lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; 设置为加载配置文件，并显示&lt;span class=&quot;s2&quot;&gt;&quot;reloaded!&quot;&lt;/span&gt;信息
bind &lt;span class=&quot;k&quot;&gt;r&lt;/span&gt; source&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;/&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;tmux&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;conf&lt;/span&gt; \; display &lt;span class=&quot;s2&quot;&gt;&quot;Reloaded!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;加入如下几条语句， 现在切换面板就和vim一样了：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;# map Vi movement keys &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; pane movement keys
bind &lt;span class=&quot;k&quot;&gt;h&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;L
bind &lt;span class=&quot;k&quot;&gt;j&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;D
bind &lt;span class=&quot;k&quot;&gt;k&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;U
bind &lt;span class=&quot;k&quot;&gt;l&lt;/span&gt; select&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##复制/粘贴&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;按前缀+[ 进入复制模式&lt;/li&gt;
  &lt;li&gt;按 space 开始复制，移动光标选择复制区域&lt;/li&gt;
  &lt;li&gt;按 Enter 复制并退出copy-mode。&lt;/li&gt;
  &lt;li&gt;将光标移动到指定位置，按前缀+ ] 粘贴&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果把tmux比作vim的话，那么我们大部分时间都是处于编辑模式，只需要在配置文件(~/.tmux.conf)中加入如下行即可以像 vim一样使用hjkl移动:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;#copy&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt; 将快捷键设置为&lt;span class=&quot;k&quot;&gt;vi&lt;/span&gt; 模式
setw &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;keys &lt;span class=&quot;k&quot;&gt;vi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;##会话的创建和保存&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;终端运行tmux + 会话名，创建或打开会话&lt;/li&gt;
  &lt;li&gt;前缀 + d 退出并保存会话&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##窗口操作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前缀 + c 创建一个新的window&lt;/li&gt;
  &lt;li&gt;前缀 + b 重命名当前window&lt;/li&gt;
  &lt;li&gt;前缀 + &amp;amp; 关闭当前window&lt;/li&gt;
  &lt;li&gt;前缀 + n 移动到下一个窗口&lt;/li&gt;
  &lt;li&gt;前缀 + p 移动到前一个窗口&lt;/li&gt;
  &lt;li&gt;前缀 + l 切换到上一个窗口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##面板操作&lt;/p&gt;

&lt;p&gt;在配置文件中添加下面两行就可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;前缀+ |-&lt;/code&gt;来水平和垂直分割窗口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;# use PREFIX &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; split window horizontally and PREFIX &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; split vertically
bind &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; split&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;window &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;h&lt;/span&gt;
bind &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; split&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;window &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;添加如下命令到配置文件后后可以使用HJKL来调整窗口大小:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;	
# &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt; panes using PREFIX H&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; J&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; K&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; L
bind H &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;L &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind J &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;D &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind K &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;U &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
bind L &lt;span class=&quot;k&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;pane &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;R &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其他操作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + 方向键，切换窗口
&lt;/Ctrl-b&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + q 显示所有面板
&lt;/Ctrl-b&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;Ctrl-b&gt; + !/x 关闭当前面板

&lt;/Ctrl-b&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看所有的按键，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Ctrl-b&amp;gt; + ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##Tmux个性化&lt;/p&gt;

&lt;p&gt;你可以使用&lt;a href=&quot;https://github.com/erikw/tmux-powerline&quot;&gt;tmux-powerline&lt;/a&gt;来美化你的状态栏。&lt;/p&gt;

&lt;p&gt;美化之后的效果是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/images/tmux2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后附上我的tmux配置文件：&lt;a href=&quot;https://github.com/LippiOuYang/Profiles/blob/master/tmux.conf&quot;&gt;.tmux.conf&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 
</feed>